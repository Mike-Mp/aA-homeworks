Card:

A Card has two bits of info: its face value, and whether it is face-up or face-down. Create instance variables to keep track of this information. Make a method to display information about the card: nothing when face-down or its value when face-up.

method tips => #hide, #reveal, #to_s, #==

Board:

The Board is responsible for keeping track of all your Cards. You'll want a grid instance variable to contain Cards.

Useful methods:
  => #populate should fill the board with a set of shuffled Card pairs.
  => #render should pring out a representation of the Board's current state
  => #won? should return true if all cards have been revealed
  => #reveal should reveal a Card at guessed_pos (unless it's already face-up, in which case the method should do nothing). It should also return the value of the card it revealed (you'll see why later).



Game:

The Game should have instance variable for the Board and the previously-guessed position (if any). It should also have methods for managing the Board-Player interaction. You may want a play loop that runs until the game is over. Inside the loop, you should render the board, prompt the player for input, and get a guessed pos. Pass this pos to a make_guess method, where you will handl@e the actual memory/matching logic. Some tips on implementing this:
  => If we're not already checking another Card, leave the card at guessed_pos face-up and update the previous_guess variable.
  => If we are checking another card, we should compare the Card at guessed_pos with the one at previous_guess.
    => If the cards match, we should leave them both face-up.
    => Else, flip both cards face-down.
    => In either case, reset previous_guess.

1. Create instance variable for the board and previously guessed position
2. #run/play method that runs the game until game_over?
3. #play_game method
  => renders the board
  => asks for player input, gets an guessed pos
  => pass this input to #make_guess method